# syntax=docker/dockerfile:1

# Accept build argument for target platform
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# First stage: determine architecture
FROM --platform=$BUILDPLATFORM ubuntu:24.04 AS platform-detect
ARG TARGETPLATFORM
RUN case "$TARGETPLATFORM" in \
        "linux/amd64") echo "x86_64" > /platform ;; \
        "linux/arm64") echo "aarch64" > /platform ;; \
        *) echo "Unsupported platform: $TARGETPLATFORM" && exit 1 ;; \
    esac

# Main stage
FROM ubuntu:24.04

# Copy the platform information and set environment variable
COPY --from=platform-detect /platform /platform
RUN ARCH=$(cat /platform) && echo "export TARGETPLATFORM_ARCH=$ARCH" >> /etc/environment
ENV TARGETPLATFORM_ARCH=${TARGETPLATFORM_ARCH}

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    ocrmypdf \
    tesseract-ocr-deu \
    libjpeg-dev \
    libxml2 \
    libxslt1-dev \
    build-essential \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Set Python environment variables
ENV PYTHONPATH=/app/.venv/lib/python3.12/site-packages
ENV PATH="/root/.local/bin:$PATH"
# Set platform-specific pip configurations
RUN echo "export PIP_PLATFORM=$(cat /platform)-linux-gnu" >> /etc/environment
ENV PIP_PLATFORM=${PIP_PLATFORM}

# Install uv and set up virtual environment
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    uv venv && \
    . .venv/bin/activate && \
    uv pip install wheel setuptools

# Copy and install requirements
COPY requirements.txt .
RUN . .venv/bin/activate && \
    # Force platform-specific wheels
    uv pip install --platform ${TARGETPLATFORM_ARCH}-linux-gnu \
                  --only-binary=:all: \
                  --target-python-version=cp312 \
                  -r requirements.txt

COPY . .

HEALTHCHECK CMD [ "curl", "-f", "http://localhost:8080/health" ]
EXPOSE 5000

CMD [".venv/bin/activate", "&&", ".venv/bin/python", "app.py", "--only_api"]